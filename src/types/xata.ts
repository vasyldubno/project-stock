// Generated by Xata Codegen 0.23.5. Please do not edit.
import { XATA_API_KEY } from "@/config/consts";
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "stock",
    columns: [
      { name: "exchange", type: "string" },
      { name: "ticker", type: "string" },
      { name: "name", type: "string" },
      { name: "priceCurrent", type: "float" },
      { name: "priceTarget", type: "float" },
      { name: "priceGrowth", type: "float" },
      { name: "pe", type: "float" },
      { name: "marketCap", type: "float" },
      { name: "dividendYield", type: "float" },
      { name: "annualDividend", type: "float" },
      { name: "payoutRation", type: "float" },
      { name: "roe", type: "float" },
      { name: "gfValue", type: "float" },
      { name: "gfValueMargin", type: "float" },
      { name: "isDividendAristocrat", type: "bool" },
      { name: "isDividendKing", type: "bool" },
      { name: "index", type: "link", link: { table: "index" } },
      { name: "sector", type: "string" },
      { name: "subIndustry", type: "string" },
      { name: "analystRating", type: "link", link: { table: "analystRating" } },
      { name: "eps", type: "float" },
    ],
  },
  { name: "index", columns: [{ name: "title", type: "string" }] },
  { name: "analystRating", columns: [{ name: "buy", type: "int" }] },
  {
    name: "portfolioStock",
    columns: [
      { name: "ticker", type: "string", unique: true },
      { name: "exchange", type: "string" },
      { name: "averageCostPerShare", type: "float" },
      { name: "gainUnrealizedPercentage", type: "float" },
      { name: "gainUnrealizedValue", type: "float" },
      { name: "marketPrice", type: "float" },
      { name: "isTrading", type: "bool", defaultValue: "false" },
      { name: "startTradeDate", type: "datetime" },
      { name: "gainRealizedPercentage", type: "float" },
      { name: "gainRealizedValue", type: "float" },
      { name: "lastDividendPayDate", type: "datetime" },
      { name: "dividendValue", type: "float" },
      { name: "dividendPercentage", type: "float" },
    ],
  },
  {
    name: "dividend",
    columns: [
      { name: "dividendValue", type: "float" },
      { name: "dividendYield", type: "float" },
      { name: "payDate", type: "datetime" },
      { name: "totalAmount", type: "float" },
      { name: "ticker", type: "string" },
    ],
  },
  {
    name: "transaction",
    columns: [
      { name: "price", type: "float" },
      { name: "count", type: "int" },
      { name: "type", type: "string" },
      { name: "ticker", type: "string" },
      { name: "date", type: "datetime" },
    ],
  },
  {
    name: "test",
    columns: [{ name: "amount", type: "int", defaultValue: "0" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Stock = InferredTypes["stock"];
export type StockRecord = Stock & XataRecord;

export type Index = InferredTypes["index"];
export type IndexRecord = Index & XataRecord;

export type AnalystRating = InferredTypes["analystRating"];
export type AnalystRatingRecord = AnalystRating & XataRecord;

export type PortfolioStock = InferredTypes["portfolioStock"];
export type PortfolioStockRecord = PortfolioStock & XataRecord;

export type Dividend = InferredTypes["dividend"];
export type DividendRecord = Dividend & XataRecord;

export type Transaction = InferredTypes["transaction"];
export type TransactionRecord = Transaction & XataRecord;

export type Test = InferredTypes["test"];
export type TestRecord = Test & XataRecord;

export type DatabaseSchema = {
  stock: StockRecord;
  index: IndexRecord;
  analystRating: AnalystRatingRecord;
  portfolioStock: PortfolioStockRecord;
  dividend: DividendRecord;
  transaction: TransactionRecord;
  test: TestRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://s-workspace-8e3sca.us-east-1.xata.sh/db/stock",
  apiKey: XATA_API_KEY,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
